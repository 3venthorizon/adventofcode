
#.#.#
L0 = 1

#.#.#?
#.#..#
#..#.#
.#.#.#
total arrangements = 4
total = 1 + 3
L1 = 1 + 1 * 3

??????? 1,1,1

#.#.#..                 [0, 1, 1, 2]
    #.#..#.             [0, 1, 2, 1]
        #.#...#         [0, 1, 3, 0]
        #..#..#         [0, 2, 2, 0] Cause Redundant
        .#.#..#         [1, 1, 2, 0] Cause Redundant
    #..#.#.             [0, 2, 1, 1]
        #..#..#         [0, 2, 2, 0]
        #...#.#         [0, 3, 1, 0]
        .#..#.#         [1, 2, 1, 0] Cause Redundant
    .#.#.#.             [1, 1, 1, 1]
        .#.#..#         [1, 1, 2, 0]
        .#..#.#         [1, 2, 1, 0]
        ..#.#.#         [2, 1, 1, 0]

Analysis
starting arrangement = 1
dot buckets = number of groups(nG) + 1
4 dots total and buckets always sum up to 4 dots in total
first time generation creates n dot arrangements
generation depth = number of trailing dots

starting arrangement
#.#.#..                 [0, 1, 1, 2]    digits = 4
generates 3 arrangements
    #.#..#.             [0, 1, 2, 1]    digits = 2
        generates 1 arrangement
        #.#...#         [0, 1, 3, 0]
    #..#.#.             [0, 2, 1, 1]    digits = 3
        generates 2 arrangements
        #..#..#         [0, 2, 2, 0]
        #...#.#         [0, 3, 1, 0]
    .#.#.#.             [1, 1, 1, 1]    digits = 4
        generates 3 arrangements
        .#.#..#         [1, 1, 2, 0]
        .#..#.#         [1, 2, 1, 0]
        ..#.#.#         [2, 1, 1, 0]
total arrangements = 10
total = 1 + (1 * 3) + (2 * 3)
L2 = L1 + (2 * 3)

Let's test this theory further:
???????? 1,1,1
#.#.#...                [0, 1, 1, 3]    digits = 5
generates 3 arrangements
    #.#..#..            [0, 1, 2, 2]    digits = 2
        generates 1 arrangement
        #.#...#.        [0, 1, 3, 1]
            #.#....#    [0, 1, 4, 0]
    #..#.#..            [0, 2, 1, 2]    digits = 3
        generates 2 arrangements
        #..#..#.        [0, 2, 2, 1]
            #..#...#    [0, 2, 3, 0]
        #...#.#.        [0, 3, 1, 1]
            #...#..#    [0, 3, 2, 0]
            #....#.#    [0, 4, 1, 0]
    .#.#.#..            [1, 1, 1, 2]    digits = 4
        generates 3 arrangements
        .#.#..#.        [1, 1, 2, 2]
            .#.#...#    [1, 1, 3, 0]
        .#..#.#.        [1, 2, 1, 1]
            .#..#..#    [1, 2, 2, 0]
            .#...#.#    [1, 3, 1, 0]
        ..#.#.#.        [2, 1, 1, 1]
            ..#.#..#    [2, 1, 2, 0]
            ..#..#.#    [2, 2, 1, 0]
            ...#.#.#    [3, 1, 1, 0]
total arrangements = 20
3:1 dot buckets = [0, 1, 1, 3]


total = 1 + (3 * 1) + (3 * 2) + [3+2+1 + 2+1 + 1]
??? L1 + L2 + (3 * 2)


Regex pattern: (([^#]|^)(#{1}\.+#{1}\.+#{1})([^#]|$))

Regex explanation:
(  )              Outer brackets matches the whole group or none at all.
([^#]|^)          First character group must not be #, or it must be the start.
1,1,1 Translates to: (#{1}\.+#{1}\.+#{1})
   each number:   #{n}  n number of #.
   each comma:    \.+   one or more dots.
([^#]|$)          Last character group must not be #, or it must be the end.


?????????? 1,1,1,1

#.#.#.#...
	#.#.#..#..
		#.#.#...#.
			#.#.#....#
	#.#..#.#..
		#.#..#..#.
			#.#..#...#
		#.#...#.#.
			#.#...#..#
			#.#....#.#
	#..#.#.#..
		#..#.#..#.
			#..#.#...#
		#..#..#.#.
			#..#..#..#
			#..#...#.#
		#...#.#.#.
			#...#.#..#
			#...#..#.#
			#....#.#.#
	.#.#.#.#..
		.#.#.#..#.
			.#.#.#...#
		.#.#..#.#.
			.#.#..#..#
			.#.#...#.#
		.#..#.#.#.
			.#..#.#..#
			.#..#..#.#
			.#...#.#.#
		..#.#.#.#.
			..#.#.#..#
			..#.#..#.#
			..#..#.#.#
			...#.#.#.#

#.#.#..#..          #.#..#.#..          .#.#.#.#..          .#.#.#.#..
	#.#.#...#.      	#.#..#..#.      	.#.#.#..#.      	.#.#.#..#.
		#.#.#....#  		#.#..#...#  		.#.#.#...#  		.#.#.#...#
                        #.#...#.#.      	.#.#..#.#.      	.#.#..#.#.
                            #.#...#..#  		.#.#..#..#  		.#.#..#..#
                            #.#....#.#  		.#.#...#.#  		.#.#...#.#
                                            .#..#.#.#.      	.#..#.#.#.
                                                .#..#.#..#  		.#..#.#..#
                                                .#..#..#.#  		.#..#..#.#
                                                .#...#.#.#  		.#...#.#.#
                                                                ..#.#.#.#.
                                                                    ..#.#.#..#
                                                                    ..#.#..#.#
                                                                    ..#..#.#.#
                                                                    ...#.#.#.#